{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/hash.js/lib/hash.js","node_modules/hash.js/lib/hash/common.js","node_modules/hash.js/lib/hash/hmac.js","node_modules/hash.js/lib/hash/ripemd.js","node_modules/hash.js/lib/hash/sha.js","node_modules/hash.js/lib/hash/sha/1.js","node_modules/hash.js/lib/hash/sha/224.js","node_modules/hash.js/lib/hash/sha/256.js","node_modules/hash.js/lib/hash/sha/384.js","node_modules/hash.js/lib/hash/sha/512.js","node_modules/hash.js/lib/hash/sha/common.js","node_modules/hash.js/lib/hash/utils.js","node_modules/inherits/inherits_browser.js","node_modules/minimalistic-assert/index.js","src/_index.js","src/array.js","src/hash.js","src/object.js","src/random.js","src/string.js","src/task.js","src/time.js","src/util.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;aCXA,OAAO,KAAP,CAAa,CACb,MAAO,QAAQ,SAAR,CADM,CAEb,KAAM,QAAQ,QAAR,CAFO,CAGb,OAAQ,QAAQ,UAAR,CAHK,CAIb,OAAQ,QAAQ,UAAR,CAJK,CAKb,OAAQ,QAAQ,UAAR,CALK,CAMb,KAAM,QAAQ,QAAR,CANO,CAOb,KAAM,QAAQ,QAAR,CAPO,CAQb,KAAM,QAAQ,QAAR,CARO,CAAb;;;aCIA,GAAM,OAAQ,CAaZ,OAAQ,gBAAU,KAAV,CAAiB,IAAjB,CAAuB,CAC7B,GAAM,QAAS,MAAM,OAAN,CAAc,IAAd,CAAf,CACA,GAAI,SAAW,CAAC,CAAhB,CAAmB,CACjB,MAAM,MAAN,CAAa,MAAb,CAAqB,CAArB,CACD,CACF,CAlBW,CA8BZ,SAAU,kBAAU,KAAV,CAAiB,KAAjB,CAAwB,CAChC,MAAO,OAAM,SAAN,CAAgB,MAAhB,CAAuB,IAAvB,CAA4B,KAA5B,CAAmC,KAAnC,CAA0C,CAA1C,EAA6C,MAA7C,GAAwD,CAChE,CAhCW,CA8CZ,KAAM,cAAU,KAAV,CAAiB,CACrB,MAAO,OAAM,MAAM,MAAN,CAAe,CAArB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","file":"atoolbox.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        var hi = c >> 8;\n        var lo = c & 0xff;\n        if (hi)\n          res.push(hi, lo);\n        else\n          res.push(lo);\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","window.tools={\narray: require('./array'),\nhash: require('./hash'),\nobject: require('./object'),\nrandom: require('./random'),\nstring: require('./string'),\ntask: require('./task'),\ntime: require('./time'),\nutil: require('./util')\n}","/**\n * array utils, inspired to goog.array\n * @namespace tools.array\n */\nconst array = {\n  /**\n   * remove an element from array\n   * it removes only the first occurrence\n   * @method tools.array.remove\n   * @todo item=object, date, regexp ...\n   * @todo remove all item, not only the first one\n   * @param {Array<*>} array\n   * @param {*} item\n   * @test.case ['js','ruby','python'], 'ruby' > &['js','python']\n   * @test.case [1,2,3], 2 > &[1,3]\n   * @test.case [1,2,3], 3 > &[1,2]\n   */\n  remove: function (array, item) {\n    const _index = array.indexOf(item)\n    if (_index !== -1) {\n      array.splice(_index, 1)\n    }\n  },\n\n  /**\n   * remove an element from array at position\n   * @method tools.array.removeAt\n   * @param {Array<*>} array\n   * @param {number} index\n   * @test.case [1,2,3], 0 > &[2,3]\n   * @test.case [1,2,3], 1 > &[1,3]\n   * @test.case [1,2,3], -1 > &[1,2]\n   * @test.case [1,2,3], 4 > &[1,2,3]\n   */\n  removeAt: function (array, index) {\n    return Array.prototype.splice.call(array, index, 1).length === 1\n  },\n\n  /**\n   * get last element of array or undefined\n   * @method tools.array.last\n   * @param {Array<*>} array\n   * @return {*} last element of the array or undefined\n   * @test.case [1,2,3] > 3\n   * @test.case [null, 0, -1] > -1\n   * @test.case [null] > null\n   * @test.case [0] > 0\n   * @test.case [] > undefined\n   * @test.case [1, undefined] > undefined\n   */\n  last: function (array) {\n    return array[array.length - 1]\n  },\n\n  /**\n   * get nth element of array\n   * @method tools.array.at\n   * @param {Array<*>} array\n   * @return {*} nth element of array; if negative, start from end: -1 = last element; undefined if missing\n   * @test.case [1,2,3], 0 > 1\n   * @test.case [0,1,null,3], 0 > 0\n   * @test.case [0,1,null,false], -1 > false\n   * @test.case [0,1,null,false], -2 > null\n   * @test.case [0,1,'0',false], -2 > '0'\n   * @test.case [undefined,'0',false], 0 > undefined\n   * @test.case [], 2 > undefined\n   */\n  at: function (array, p) {\n    if (p < 0) {\n      p = array.length + p\n    }\n    return array[p]\n  },\n\n  /**\n   * get first element of array or undefined\n   * @method tools.array.first\n   * @param {Array<*>} array\n   * @return {*} first element of the array or undefined\n   * @test.case [1,2,3] > 1\n   * @test.case [0,1,null,3] > 0\n   * @test.case [1,null,false] > 1\n   * @test.case [null,false] > null\n   * @test.case [undefined,'0',false] > undefined\n   * @test.case [] > undefined\n   */\n  first: function (array) {\n    return array[0]\n  },\n\n  /**\n   * check if array contains an element\n   * @method tools.array.contains\n   * @param {Array<*>} array\n   * @param {*} item\n   * @return {boolean}\n   * @test.case [1,2,3], 1 > true\n   * @test.case [1,2,3], 4 > false\n   */\n  contains: function (array, item) {\n    return array.indexOf(item) !== -1\n  },\n\n  /**\n   * insert an item into array at index position\n   * @method tools.array.insert\n   * @param {Array<*>} array\n   * @param {number} index\n   * @param {*} item\n   * @test.case ['john', 'alice', 'bob'], 0, 'mary' > &['mary', 'john', 'alice', 'bob']\n   * @test.case ['john', 'alice', 'bob'], 1, 'mary' > &['john', 'mary', 'alice', 'bob']\n   * @test.case ['john', 'alice', 'bob'], -1, 'mary' > &['john', 'alice', 'bob', 'mary']\n   * @test.case ['john', 'alice', 'bob'], -2, 'mary' > &['john', 'alice', 'mary', 'bob']\n   */\n  insert: function (array, index, item) {\n    if (index > array.length) {\n      index = array.length\n    }\n\n    if (array[index]) {\n      array.splice(index, 0, item)\n    } else {\n      array[index] = item\n    }\n  },\n\n  /**\n   * concat arrays\n   * @method tools.array.concat\n   * @param {...Array<*>} arrays to chain\n   * @return {Array<*>} chained arrays\n   * @test.case [0,1,2],[3,4,5] > [0,1,2,3,4,5]\n   * @test.case [0, 1, 2, 3], ['a', 'b', 'c'], [{a: 2}] > [0, 1, 2, 3, 'a', 'b', 'c', {a: 2}]\n   */\n  concat: function (args) {\n    return Array.prototype.concat.apply(Array.prototype, arguments)\n  },\n\n  /**\n   * empty array - need to keep references\n   * @method tools.array.empty\n   * @test.case [0,1,2] > &[]\n   * @test.case [] > &[]\n   */\n  empty: function (array) {\n    while (array[0]) {\n      array.pop()\n    }\n  },\n\n  /**\n   * push item into array, optionally check if already exists\n   * @method tools.array.add\n   * @param {Array<*>} array\n   * @param {*} item\n   * @param {boolean} [unique=false]\n   * @test.case [0,1,2,3], 3, true > &[0,1,2,3]\n   */\n  add: function (array, item, unique) {\n    if (!!unique && array.contains(array, item)) {\n      return\n    }\n    array.push(item)\n  }\n\n}\n\nmodule.exports = array\n","const lib = require('hash.js')\n\n/**\n * @namespace tools.hash\n */\nconst hash = {\n  /**\n   * Generate hash using sha256 in hex format\n   * @method tools.hash.sha256\n   * @param {string} data any string\n   * @return {string} sha256 in hex format\n   *\n   * @test.case\n   * 'usk6fgbuygbu6' > 'ee42f619919727584b66fe25248ed4bba8e87dcfb3e62a90143ea17ba48df58e'\n   * @test.case\n   * 'lorem ipsum %1283770tv8gv 6c6fgw ucthv iy'\n   * > '18d18c26ed98c0e88d9121132be48f42596e899ac50f15f854c9d0a82b9f2cb5'\n   */\n  sha256: function (data) {\n    return lib.sha256()\n      .update(data)\n      .digest('hex')\n  }\n}\n\nmodule.exports = hash\n","/**\n * @namespace tools.object\n */\nconst object = {\n  /**\n   * flat keys in object\n   * @method tools.object.flat\n   * @param {Object} obj\n   * @return {Object}\n   * @test.case { a: { a1: 1, a2: 2 }, b: 3 } > { 'a.a1': 1, 'a.a2': 2, 'b': 3 }\n   */\n  flat: function (obj) {\n    const _obj = {}\n    return object._rflat(obj, '', _obj)\n  },\n\n  _rflat: function (obj, base, flat) {\n    for (const key in obj) {\n      try {\n        // eslint-disable-next-line eqeqeq\n        if (obj[key].constructor == Object) {\n          object._rflat(obj[key], base + key + '.', flat)\n        } else {\n          flat[base + key] = obj[key]\n        }\n      } catch (e) {\n        flat[base + key] = obj[key]\n      }\n    }\n  },\n\n  /**\n   * merge b into a\n   * @method tools.object.merge\n   * @param {Object} a\n   * @param {Object} b\n   * @test.case {a: 1, b: 'ciao'}, {a: 4, c: { d: 8, e: 9}} > &{ a: 4, b: 'ciao', c: { d: 8, e: 9 } }\n   */\n  merge: function (a, b) {\n    if (!a) {\n      a = b || {}\n      return\n    }\n    if (!b) {\n      return a\n    }\n\n    for (var i in b) {\n      if (typeof b[i] === 'object') {\n        if (b[i] instanceof Array) {\n          a[i] = object.clone(b[i])\n          continue\n        }\n        if (!a[i] || typeof a[i] !== 'object') {\n          a[i] = {}\n        }\n        object.merge(a[i], b[i])\n      } else {\n        a[i] = b[i]\n      }\n    }\n  },\n\n  /**\n   * Clone an array or an object in input\n   * @method tools.object.clone\n   * @param {Object|Array} obj The array or the object to clone\n   * @return {Object|Array}\n   * @test.case {a: 1, b: 'ciao'} > {a: 1, b: 'ciao'}\n   * @test.case {a: 4, c: { d: 8, e: 9}} > {a: 4, c: { d: 8, e: 9}}\n   * @test.case {a: 4, b: 'ciao', c: { d: 8, e: 9 }} > {a: 4, b: 'ciao', c: { d: 8, e: 9 }}\n   */\n  clone: function (obj) {\n    if (obj === null || obj === undefined) {\n      return obj\n    }\n    var _type = (obj instanceof Array) ? 'array' : typeof obj\n    if (_type === 'object' || _type === 'array') {\n      if (obj instanceof Date) {\n        return new Date(obj.getTime())\n      } else if (typeof window !== 'undefined') {\n        return obj\n      } else {\n        if (obj.clone) {\n          return obj.clone()\n        }\n          /**\n           * @type {Array|Object}\n           */\n        var _clone = _type === 'array' ? [] : {}\n        for (var key in obj) {\n          _clone[key] = object.clone(obj[key])\n        }\n        return _clone\n      }\n    }\n    return obj\n  },\n\n  /**\n   * @see http://google.github.io/closure-library/api/source/closure/goog/object/object.js.src.html#l225\n   * @method tools.object.getKeys\n   * @param {Object} obj\n   * @return {Array<string>}\n   * @test.case {a: () => { }, b: 1, c: 'ciao'} > ['a','b','c']\n   */\n  getKeys: function (obj) {\n    if (Object.keys) {\n      return Object.keys(obj)\n    }\n    var _keys = []\n    for (var key in obj) {\n      _keys.push(key)\n    }\n    return _keys\n  },\n\n  /**\n   * it use ``Object.getOwnPropertyNames`` to inherits child from parent, without prototype\n   * @method tools.object.inherits\n   * @todo check if both are objects\n   * @param {Object} destination\n   * @param {Object} source\n   * @test.case {}, {f0: () => { }, p1: 1, p2: 'ciao'} > &{f0: () => { }, p1: 1, p2: 'ciao'}\n   */\n  inherits: function (destination, source) {\n    Object.getOwnPropertyNames(source).forEach((property) => {\n      destination[property] = source[property]\n    })\n  },\n\n  /**\n   * empty object - need to keep references\n   * @method tools.object.empty\n   * @param {Object} obj\n   * @test.case {a:0,b:1,c:2,d:[],e:{f:-1}} > &{}\n   * @test.case {} > &{}\n   */\n  empty: function (obj) {\n    for (const i in obj) {\n      delete obj[i]\n    }\n  },\n\n  /**\n   * restore flat object\n   * @method tools.object.raise\n   * @param {Object} obj\n   * @return {Object}\n   * @test.case { 'a.a1': 1, 'a.a2': 2, 'b': 3 } > { a: { a1: 1, a2: 2 }, b: 3 }\n   */\n  raise: function (obj) {\n    const _raise = {}\n\n    const _f = function (flat, raise) {\n      for (const path in flat) {\n        const _keys = path.split('.')\n        let _cursor = raise\n        _keys.forEach((key, i) => {\n          if (i < _keys.length - 1) {\n            if (!_cursor[key]) {\n              _cursor[key] = {}\n            }\n            _cursor = _cursor[key]\n          } else {\n            _cursor[key] = flat[path]\n          }\n        })\n      }\n    }\n    _f(obj, _raise)\n\n    return _raise\n  },\n\n  /**\n   * get value in object using a flat key\n   * @method tools.object.getByFlatKey\n   * @todo check params\n   * @param {Object} obj\n   * @param {string} fkey\n   * @return {Object}\n   * @test.case { a: { b: {c: 1} } }, 'a.b.c' > 1\n   */\n  getByFlatKey: function (obj, fkey) {\n    let _path = fkey.split('.')\n    let _walk = obj\n    for (let i = 0; i < _path.length; i++) {\n      if (!_walk[_path[i]]) {\n        return undefined\n      }\n      _walk = _walk[_path[i]]\n    }\n    return _walk\n  },\n\n  /**\n   * set value in object using a flat key\n   * @method tools.object.setByFlatKey\n   * @todo check params\n   * @param {Object} obj\n   * @param {string} fkey\n   * @param {*} val\n   * @test.case\n   * {}, 'a.b.c', 1 > &{ a: { b: {c: 1} } }\n   */\n  setByFlatKey: function (obj, fkey, val) {\n    let _path = fkey.split('.')\n    let _walk = obj\n    for (let i = 0; i < _path.length; i++) {\n      if (!_walk[_path[i]]) {\n          // if it's the last step, add key as undefined\n        if (i === _path.length - 1) {\n          _walk[_path[i]] = undefined\n          return\n        }\n        _walk[_path[i]] = {}\n      }\n      _walk = _walk[_path[i]]\n    }\n    _walk = val\n  }\n}\n\nmodule.exports = object\n","const hash = require('./hash')\n\n/**\n * @namespace tools.random\n */\nconst random = {\n  /**\n   * get random int from 0 to max\n   * @method tools.random.rnd\n   * @param {number} max\n   * @return {number}\n   */\n  rnd: function (max) {\n    if (!max) {\n      return 0\n    }\n    return Math.floor(max * Math.random())\n  },\n  /**\n   * get random int from min to max\n   * @method tools.random.number\n   * @param {number} min\n   * @param {number} max\n   * @return {number}\n   */\n  number: function (min, max) {\n    if (!max) {\n      return random.rnd(min)\n    }\n    min = Math.floor(min)\n    max = Math.floor(max)\n    return min + random.rnd(1 + max - min)\n  },\n  /**\n   * get random string\n   * @method tools.random.number\n   * @param {number} [length=8]\n   * @param {Array} [set=abcdefghijklmnopqrstuvwxyz]\n   * @return {string}\n   */\n  string: function (length = 8, set = 'abcdefghijklmnopqrstuvwxyz') {\n    let _str = ''\n    for (let i = 0; i < length; i++) {\n      _str += random.element(set)\n    }\n    return _str\n  },\n  /**\n   * get random hex string\n   * @method tools.random.hex\n   * @param {number} [length=8]\n   * @return {string}\n   */\n  hex: function (length = 8) {\n    return random.string(length, '0123456789abcdef')\n  },\n  /**\n   * get random hash string\n   * @method tools.random.hash\n   * @param {?string} salt\n   * @return {string}\n   */\n  hash: function (salt = '') {\n    return hash.sha256(new Date().toISOString() + salt)\n  },\n  /**\n   * get random element from array\n   * @method tools.random.hash\n   * @param {Array<*>} array\n   * @param {Array<*>} not\n   * @return {*} element\n   */\n  element: function (array, not) {\n    if (!not) {\n      return array[random.number(0, array.length - 1)]\n    } else {\n      let _item\n      let i = 0\n      do {\n        _item = random.element(array)\n      } while (not.indexOf(_item) !== -1 && ++i < array.length)\n      return _item\n    }\n  }\n}\n\nmodule.exports = random\n","/**\n * @namespace tools.string\n */\nconst string = {\n  /**\n   * replace placeholders inside graph brackets {} with obj dictionary\n   * ~ES6 template string without $\n   * @method tools.string.template\n   * @param {string} str\n   * @param {Object} obj\n   * @param {boolean} [remove=false] missing placeholders from obj, default false\n   * @return {string}\n   *\n   * @test.case 'hi {name} how are you?', {name: 'Alice'} > 'hi Alice how are you?'\n   * @test.case 'hi {name} how are you?', {}, true > 'hi  how are you?'\n   * @test.case '{a} one, 2 {b}', {a: 1, b: 'two', c: 3} > '1 one, 2 two'\n   * @test.case `multiline {1}\\n multiline`, {1: 'one'} > `multiline one\\n multiline`\n   * @test.case '<div class=\"{color}\">My name is {name} I was born in {year} and my favourite color is {color}</div>{nothing}', {name: 'Alice',year: 2014,color: 'purple'}\n   * > '<div class=\"purple\">My name is Alice I was born in 2014 and my favourite color is purple</div>{nothing}'\n   */\n  template: function (str, obj, remove = false) {\n    if (!str) {\n      return ''\n    }\n    return str.replace(/\\{([\\w.]+)\\}/g, function (str, key) {\n      return obj[key] ? obj[key] : (remove ? '' : str)\n    })\n  },\n\n  /**\n   * trim string\n   * @see http://google.github.io/closure-library/api/namespace_goog_string.html\n   * @method tools.string.trim\n   * @param {string} str\n   * @param {?string[]} cuts\n   * @return {string}\n   *\n   * @test.case ' regular trim      ' > 'regular trim'\n   * @test.case ' trim,no,. : \\n    ', [',','.',' ', ':', '\\n'] > 'trim,no'\n   * @test.case ' trim string naneno', ['na','ne','no', ' '] > 'trim string'\n   * @test.case '({cut these silly brackets please)}', ['{', '}', '(', ')'] > 'cut these silly brackets please'\n   */\n  trim: function (str, cuts) {\n    if (!cuts) {\n      return str.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '')\n    } else {\n      const _cuts = cuts.map(c => {\n        if (c === '[' || c === ']') {\n          return '\\\\' + c\n        }\n        return c\n      }).join()\n      return str.replace(new RegExp('^[' + _cuts + ']+|[' + _cuts + ']+$', 'gm'), '')\n    }\n  },\n\n  /**\n   * @method tools.string.replaceAll\n   * @param {string} str\n   * @param {string} from\n   * @param {string} to\n   * @return {string}\n   * @test.case 'abcadaeafaga', 'a', '' > 'bcdefg'\n   * @test.case '112233445544', '4', '9' > '112233995599'\n   * @test.case 'repeat repeat repeat', 'repeat', 'don\\'t repeat' > 'don\\'t repeat don\\'t repeat don\\'t repeat'\n   * @test.case 'no replace all in js native code that replace all the replace', ' ', '_' >\n   * 'no_replace_all_in_js_native_code_that_replace_all_the_replace'\n   */\n  replaceAll: function (str, from, to) {\n    return str.split(from).join(to)\n  },\n\n  /**\n   * @method tools.string.capitalize\n   * @param {string} str\n   * @return {string}\n   * @test.case 'alice' > 'Alice'\n   * @test.case 'alice smith' > 'Alice smith'\n   * @test.case 'alice-smith' > 'Alice-smith'\n   */\n  capitalize: function (str) {\n    return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase()\n  },\n\n  /**\n   * @method tools.string.prependMissing\n   * @param {string} prefix\n   * @param {string} str\n   * @return {string}\n   * @test.case 'miss ', 'Alice' > 'miss Alice'\n   * @test.case 'miss ', 'miss Alice' > 'miss Alice'\n   */\n  prependMissing: function (prefix, str) {\n    if (str.indexOf(prefix) === 0) {\n      return str\n    }\n    return prefix + str\n  },\n\n  /**\n   * @method tools.string.matchAll\n   * @param {string} str\n   * @param {RegExp} regexp\n   * @return {String[]}\n   */\n  matchAll: function (str, regexp) {\n    const _matches = []\n    let _match = regexp.exec(str)\n    while (_match) {\n      _matches.push(_match)\n      _match = regexp.exec(str)\n    }\n    return _matches\n  }\n}\n\nmodule.exports = string\n","const time = require('./time')\nconst array = require('./array')\n\n/**\n * @namespace tools.task\n */\n\n/**\n * simple async parallel task manager\n * @class\n * @param {Object} options\n * @param {function} options.done callback when all tasks are completed\n */\nconst Tasks = function (options = {}) {\n  const __tasks = []\n\n  /**\n   * add task\n   * @param {!String} id\n   */\n  this.todo = function (id) {\n    if (options.chrono) {\n      time.chrono.set(id)\n    }\n    __tasks.push(id)\n  }\n\n  /**\n   * declare task it's done\n   * @param {!String} id\n   */\n  this.done = function (id) {\n    array.remove(__tasks, id)\n    if (__tasks.length < 1) {\n      if (options.done) {\n        options.done()\n      }\n    }\n    if (options.chrono) {\n      const _time = time.chrono.get(id)\n      time.chrono.clear(id)\n      return {chrono: _time}\n    }\n  }\n}\n\nmodule.exports = Tasks\n","const object = require('./object')\n\n/**\n * @namespace tools.time\n */\n\nconst time = {\n  /**\n   * @namespace tools.time.chrono\n   */\n  chrono: {\n    /**\n     * @method tools.time.chrono.set\n     * @param {string} [tag=chrono]\n     */\n    set: function (tag = 'chrono') {\n      if (_chronos[tag]) {\n        console.warn('time chrono', tag, 'already set; use reset instead or start a new chrono')\n        return\n      }\n      _chronos[tag] = Date.now()\n    },\n    /**\n     * @method tools.time.chrono.reset\n     * @param {string} [tag=chrono]\n     */\n    reset: function (tag = 'chrono') {\n      _chronos[tag] = Date.now()\n    },\n    /**\n     * @method tools.time.chrono.clear\n     * @param {string} [tag=chrono]\n     */\n    clear: function (tag = 'chrono') {\n      delete _chronos[tag]\n    },\n    /**\n     * @method tools.time.chrono.get\n     * @param {string} [tag=chrono]\n     * @return {number} ms\n     */\n    get: function (tag = 'chrono') {\n      const _now = Date.now()\n      return _chronos[tag] ? _now - _chronos[tag] : 0\n    }\n  },\n\n  /**\n   * clear counters\n   * if you care about memory leaks\n   * @method tools.time.chrono.gc\n   */\n  gc: function () {\n    object.empty(_chronos)\n  }\n}\n\nconst _chronos = {}\n\nmodule.exports = time\n","const util = {\n  /**\n   * check if ``val`` is setted, means it's not ``null`` or ``undefined``\n   * @param {*} val\n   * @return {bool}\n   */\n  isSet: function (val) {\n    return (typeof val !== 'undefined' && val !== null)\n  },\n\n  /**\n   * check if you are on browser or not\n   * @return {bool}\n   */\n  onBrowser: function () {\n    return (typeof window === 'object' && window instanceof Window)\n  }\n}\n\nmodule.exports = util\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}