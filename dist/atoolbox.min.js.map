{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/_index.js","src/array.js","src/hash.js","src/object.js","src/random.js","src/string.js","src/task.js","src/time.js"],"names":[],"mappingshJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"atoolbox.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","window.tools={\narray: require('./array'),\nhash: require('./hash'),\nobject: require('./object'),\nrandom: require('./random'),\nstring: require('./string'),\ntask: require('./task'),\ntime: require('./time')\n}","/**\n * array utils, inspired to goog.array\n * @namespace tools.array\n */\nconst array = {\n  /**\n   * @method tools.array.remove\n   * remove an element from array, only once\n   * @todo item=object, date, regexp ...\n   * @todo remove all item, not only first\n   * @param {Array<*>} array\n   * @param {*} item\n   * @test.case [1,2,3], 2 > &[1,3]\n   * @test.case [1,2,3], 3 > &[1,2]\n   * @test.case ['js','ruby','python'], 1 > &['js','python']\n   */\n  remove: function (array, item) {\n    const _index = array.indexOf(item)\n    if (_index !== -1) {\n      array.splice(_index, 1)\n    }\n  },\n  /**\n   * remove an element from array at position\n   * @param {Array<*>} array\n   * @param {number} index\n   * @test.case [1,2,3], 0 > &[2,3]\n   * @test.case [1,2,3], 1 > &[1,3]\n   * @test.case [1,2,3], -1 > &[1,2]\n   * @test.case [1,2,3], 4 > &[1,2,3]\n   */\n  removeAt: function (array, index) {\n    return Array.prototype.splice.call(array, index, 1).length === 1\n  },\n  /**\n   * get last element of array or undefined\n   * @param {Array<*>} array\n   * @return {*} last element of the array or undefined\n   * @test.case [1,2,3] > 3\n   * @test.case [null, 0, -1] > -1\n   * @test.case [null] > null\n   * @test.case [0] > 0\n   * @test.case [] > undefined\n   * @test.case [1, undefined] > undefined\n   */\n  last: function (array) {\n    return array[array.length - 1]\n  },\n  /**\n   * get nth element of array\n   * @param {Array<*>} array\n   * @return {*} nth element of array; if negative, start from end: -1 = last element; undefined if missing\n   * @test.case [1,2,3], 0 > 1\n   * @test.case [0,1,null,3], 0 > 0\n   * @test.case [0,1,null,false], -1 > false\n   * @test.case [0,1,null,false], -2 > null\n   * @test.case [0,1,'0',false], -2 > '0'\n   * @test.case [undefined,'0',false], 0 > undefined\n   * @test.case [], 2 > undefined\n   */\n  at: function (array, p) {\n    if (p < 0) {\n      p = array.length + p\n    }\n    return array[p]\n  },\n  /**\n   * get first element of array or undefined\n   * @param {Array<*>} array\n   * @return {*} first element of the array or undefined\n   * @test.case [1,2,3] > 1\n   * @test.case [0,1,null,3] > 0\n   * @test.case [1,null,false] > 1\n   * @test.case [null,false] > null\n   * @test.case [undefined,'0',false] > undefined\n   * @test.case [] > undefined\n   */\n  first: function (array) {\n    return array[0]\n  },\n  /**\n   * check if array contains an element\n   * @param {Array<*>} array\n   * @param {*} item\n   * @return {boolean}\n   */\n  contains: function (array, item) {\n    return array.indexOf(item) !== -1\n  },\n  /**\n   * insert an item into array at index position\n   * @param {Array<*>} array\n   * @param {number} index\n   * @param {*} item\n   * @test.case ['john', 'alice', 'bob'], 0, 'mary' > &['mary', 'john', 'alice', 'bob']\n   * @test.case ['john', 'alice', 'bob'], 1, 'mary' > &['john', 'mary', 'alice', 'bob']\n   * @test.case ['john', 'alice', 'bob'], -1, 'mary' > &['john', 'alice', 'bob', 'mary']\n   * @test.case ['john', 'alice', 'bob'], -2, 'mary' > &['john', 'alice', 'mary', 'bob']\n   */\n  insert: function (array, index, item) {\n    if (index > array.length) {\n      index = array.length\n    }\n\n    if (array[index]) {\n      array.splice(index, 0, item)\n    } else {\n      array[index] = item\n    }\n  },\n\n  /**\n   * concat arrays\n   * @param {...Array<*>} arrays to chain\n   * @return {Array<*>} chained arrays\n   * @test.case [0,1,2],[3,4,5] > [0,1,2,3,4,5]\n   * @test.case [0, 1, 2, 3], ['a', 'b', 'c'], [{a: 2}] > [0, 1, 2, 3, 'a', 'b', 'c', {a: 2}]\n   */\n  concat: function (args) {\n    return Array.prototype.concat.apply(Array.prototype, arguments)\n  },\n  /**\n   * empty array - need to keep references\n   * @test.case [0,1,2] > &[]\n   * @test.case [] > &[]\n   */\n  empty: function (array) {\n    while (array[0]) {\n      array.pop()\n    }\n  },\n  /**\n   * push item into array, optionally check if already exists\n   */\n  add: function (array, item, unique) {\n    if (unique && array.contains(array, item)) {\n      return\n    }\n    array.push(item)\n  }\n\n}\n\nmodule.exports = array\n","//const crypto = require('crypto')\n\n/**\n * @namespace tools.hash\n */\nconst hash = {\n  /**\n   * Generate hash using sha256 in hex format\n   * @method tools.hash.sha256\n   * @param {string} data any string\n   * @return {string} sha256 in hex format\n   *\n   * @test\n   * 'usk6fgbuygbu6' > 'ee42f619919727584b66fe25248ed4bba8e87dcfb3e62a90143ea17ba48df58e'\n   * @test\n   * 'lorem ipsum %1283770tv8gv 6c6fgw ucthv iy'\n   * > '18d18c26ed98c0e88d9121132be48f42596e899ac50f15f854c9d0a82b9f2cb5'\n   */\n  sha256: function (data) {\n    return crypto.createHash('sha256')\n      .update(data)\n      .digest('hex')\n  }\n}\n\nmodule.exports = hash\n","/**\n * @namespace tools.object\n */\nconst object = {\n  /**\n   * merge obj2 into obj1\n   * @param {Object} obj1\n   * @param {Object} obj2\n   * @test.case {a: 1, b: 'ciao'}, {a: 4, c: { d: 8, e: 9}} > &{ a: 4, b: 'ciao', c: { d: 8, e: 9 } }\n   */\n  merge: function (obj1, obj2) {\n    if (!obj1) {\n      obj1 = obj2 || {}\n      return\n    }\n    if (!obj2) {\n      return obj1\n    }\n\n    for (var i in obj2) {\n      if (typeof obj2[i] === 'object') {\n        if (obj2[i] instanceof Array) {\n          obj1[i] = object.clone(obj2[i])\n          continue\n        }\n        if (!obj1[i] || typeof obj1[i] !== 'object') {\n          obj1[i] = {}\n        }\n        object.merge(obj1[i], obj2[i])\n      } else {\n        obj1[i] = obj2[i]\n      }\n    }\n  },\n  /**\n   * Clone an array or an object in input\n   * @function\n   * @param {Object|Array} obj The array or the object to clone\n   * @return {Object|Array}\n   */\n  clone: function (obj) {\n    if (obj === null || obj === undefined) {\n      return obj\n    }\n    var _type = (obj instanceof Array) ? 'array' : typeof obj\n    if (_type === 'object' || _type === 'array') {\n      if (obj instanceof Date) {\n        return new Date(obj.getTime())\n      } else if (typeof window !== 'undefined') {\n        return obj\n      } else {\n        if (obj.clone) {\n          return obj.clone()\n        }\n          /**\n           * @type {Array|Object}\n           */\n        var _clone = _type === 'array' ? [] : {}\n        for (var key in obj) {\n          _clone[key] = object.clone(obj[key])\n        }\n        return _clone\n      }\n    }\n    return obj\n  },\n  /**\n   * @see http://google.github.io/closure-library/api/source/closure/goog/object/object.js.src.html#l225\n   * @param {Object} obj\n   * @return {Array}\n   */\n  getKeys: function (obj) {\n    if (Object.keys) {\n      return Object.keys(obj)\n    }\n    var _keys = []\n    for (var key in obj) {\n      _keys.push(key)\n    }\n    return _keys\n  },\n\n  /**\n   * @todo check if both are objects\n   */\n  inherits: function (destination, source) {\n      //      util.inherits(destination, source)\n    Object.getOwnPropertyNames(source).forEach((property) => {\n      destination[property] = source[property]\n    })\n  },\n\n  /**\n   * empty object - need to keep references\n   * @test.case {a:0,b:1,c:2,d:[],e:{f:-1}} > &{}\n   * @test.case {} > &{}\n   */\n  empty: function (obj) {\n    for (const i in obj) {\n      delete obj[i]\n    }\n  },\n\n  /**\n   * flat keys in object\n   * @param {object} obj\n   * @returns {object}\n   * @test.case { a: { a1: 1, a2: 2 }, b: 3 } > { 'a.a1': 1, 'a.a2': 2, 'b': 3 }\n   */\n  flat: function (obj) {\n    const _flat = {}\n\n    const _f = function (obj, base) {\n      for (const key in obj) {\n        try {\n          // eslint-disable-next-line eqeqeq\n          if (obj[key].constructor == Object) {\n            _f(obj[key], base + key + '.')\n          } else {\n            _flat[base + key] = obj[key]\n          }\n        } catch (e) {\n          _flat[base + key] = obj[key]\n        }\n      }\n    }\n    _f(obj, '')\n\n    return _flat\n  },\n  /**\n   * restore flat object\n   * @param {object} obj\n   * @returns {object}\n   * @test.case { 'a.a1': 1, 'a.a2': 2, 'b': 3 } > { a: { a1: 1, a2: 2 }, b: 3 }\n   */\n  raise: function (obj) {\n    const _raise = {}\n\n    const _f = function (flat, raise) {\n      for (const path in flat) {\n        const _keys = path.split('.')\n        let _cursor = raise\n        _keys.forEach((key, i) => {\n          if (i < _keys.length - 1) {\n            if (!_cursor[key]) {\n              _cursor[key] = {}\n            }\n            _cursor = _cursor[key]\n          } else {\n            _cursor[key] = flat[path]\n          }\n        })\n      }\n    }\n    _f(obj, _raise)\n\n    return _raise\n  },\n  /**\n   * get value in object using a flat key\n   * @todo check params\n   * @param {object} obj\n   * @param {string} fkey\n   * @returns {object}\n   * @test.case { a: { b: {c: 1} } }, 'a.b.c' > 1\n   */\n  getByFlatKey: function (obj, fkey) {\n    let _path = fkey.split('.')\n    let _walk = obj\n    for (let i = 0; i < _path.length; i++) {\n      if (!_walk[_path[i]]) {\n        return undefined\n      }\n      _walk = _walk[_path[i]]\n    }\n    return _walk\n  },\n\n  /**\n   * set value in object using a flat key\n   * @todo check params\n   * @param {object} obj\n   * @param {string} fkey\n   * @param {*} val\n   * @test.case\n   * {}, 'a.b.c', 1 > &{ a: { b: {c: 1} } }\n   */\n  setByFlatKey: function (obj, fkey, val) {\n    let _path = fkey.split('.')\n    let _walk = obj\n    for (let i = 0; i < _path.length; i++) {\n      if (!_walk[_path[i]]) {\n          // if it's the last step, add key as undefined\n        if (i === _path.length - 1) {\n          _walk[_path[i]] = undefined\n          return\n        }\n        _walk[_path[i]] = {}\n      }\n      _walk = _walk[_path[i]]\n    }\n    _walk = val\n  }\n}\n\nmodule.exports = object\n","const hash = require('./hash')\n\n/**\n * @namespace tools.random\n */\nconst random = {\n  /**\n   * get random int from 0 to max\n   * @method tools.random.rnd\n   * @param {number} max\n   * @return {number}\n   */\n  rnd: function (max) {\n    if (!max) {\n      return 0\n    }\n    return Math.floor(max * Math.random())\n  },\n  /**\n   * get random int from min to max\n   * @method tools.random.number\n   * @param {number} min\n   * @param {number} max\n   * @return {number}\n   */\n  number: function (min, max) {\n    if (!max) {\n      return random.rnd(min)\n    }\n    min = Math.floor(min)\n    max = Math.floor(max)\n    return min + random.rnd(1 + max - min)\n  },\n  /**\n   * get random string\n   * @method tools.random.number\n   * @param {number} [length=8]\n   * @param {Array} [set=abcdefghijklmnopqrstuvwxyz]\n   * @return {string}\n   */\n  string: function (length = 8, set = 'abcdefghijklmnopqrstuvwxyz') {\n    let _str = ''\n    for (let i = 0; i < length; i++) {\n      _str += random.element(set)\n    }\n    return _str\n  },\n  /**\n   * get random hex string\n   * @method tools.random.hex\n   * @param {number} [length=8]\n   * @return {string}\n   */\n  hex: function (length = 8) {\n    return random.string(length, '0123456789abcdef')\n  },\n  /**\n   * get random hash string\n   * @method tools.random.hash\n   * @param {?string} salt\n   * @return {string}\n   */\n  hash: function (salt = '') {\n    return hash.sha256(new Date().toISOString() + salt)\n  },\n  /**\n   * get random element from array\n   * @method tools.random.hash\n   * @param {Array<*>} array\n   * @param {Array<*>} not\n   * @return {*} element\n   */\n  element: function (array, not) {\n    if (!not) {\n      return array[random.number(0, array.length - 1)]\n    } else {\n      let _item\n      let i = 0\n      do {\n        _item = random.element(array)\n      } while (not.indexOf(_item) !== -1 && ++i < array.length)\n      return _item\n    }\n  }\n}\n\nmodule.exports = random\n","/**\n * @namespace tools.string\n */\nconst string = {\n  /**\n   * replace placeholders inside graph brackets {} with obj dictionary\n   * ~ES6 template string\n   * @param {string} str\n   * @param {Object} obj\n   * @param {boolean=} remove missing placeholders from obj, default false\n   * @return {string}\n   *\n   * @test.case 'hi {name} how are you?', {name: 'Alice'} > 'hi Alice how are you?'\n   * @test.case 'hi {name} how are you?', {}, true > 'hi  how are you?'\n   * @test.case '{a} one, 2 {b}', {a: 1, b: 'two', c: 3} > '1 one, 2 two'\n   * @test.case `multiline {1}\\n multiline`, {1: 'one'} > `multiline one\\n multiline`\n   * @test.case '<div class=\"{color}\">My name is {name} I was born in {year} and my favourite color is {color}</div>{nothing}', {name: 'Alice',year: 2014,color: 'purple'}\n   * > '<div class=\"purple\">My name is Alice I was born in 2014 and my favourite color is purple</div>{nothing}'\n   */\n  template: function (str, obj, remove = false) {\n    if (!str) {\n      return ''\n    }\n    return str.replace(/\\{([\\w.]+)\\}/g, function (str, key) {\n      return obj[key] ? obj[key] : (remove ? '' : str)\n    })\n  },\n\n  /**\n   * trim string\n   * @see http://google.github.io/closure-library/api/namespace_goog_string.html\n   * @param {string} str\n   * @param {?string[]} cuts\n   * @return {string}\n   *\n   * @test.case ' regular trim      ' > 'regular trim'\n   * @test.case ' trim,no,. : \\n    ', [',','.',' ', ':', '\\n'] > 'trim,no'\n   * @test.case ' trim string naneno', ['na','ne','no', ' '] > 'trim string'\n   * @test.case '({cut these silly brackets please)}', ['{', '}', '(', ')'] > 'cut these silly brackets please'\n   */\n  trim: function (str, cuts) {\n    if (!cuts) {\n      return str.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '')\n    } else {\n      var _cuts = cuts.join()\n      return str.replace(new RegExp('^[' + _cuts + ']+|[' + _cuts + ']+$', 'gm'), '')\n    }\n  },\n\n  /**\n   * @param {string} str\n   * @param {string} from\n   * @param {string} to\n   * @return {string}\n   * @test.case 'abcadaeafaga', 'a', '' > 'bcdefg'\n   * @test.case '112233445544', '4', '9' > '112233995599'\n   * @test.case 'repeat repeat repeat', 'repeat', 'don\\'t repeat' > 'don\\'t repeat don\\'t repeat don\\'t repeat'\n   * @test.case 'no replace all in js native code that replace all the replace', ' ', '_' >\n   * 'no_replace_all_in_js_native_code_that_replace_all_the_replace'\n   */\n  replaceAll: function (str, from, to) {\n    return str.split(from).join(to)\n  },\n\n  /**\n   * @param {string} str\n   * @return {string}\n   * @test.case 'alice' > 'Alice'\n   * @test.case 'alice smith' > 'Alice smith'\n   * @test.case 'alice-smith' > 'Alice-smith'\n   */\n  capitalize: function (str) {\n    return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase()\n  },\n\n  /**\n   * @param {string} prefix\n   * @param {string} str\n   * @return {string}\n   * @test.case 'miss ', 'Alice' > 'miss Alice'\n   * @test.case 'miss ', 'miss Alice' > 'miss Alice'\n   */\n  prependMissing: function (prefix, str) {\n    if (str.indexOf(prefix) === 0) {\n      return str\n    }\n    return prefix + str\n  },\n\n  /**\n   * @param {string} str\n   * @param {RegExp} regexp\n   * @return {string[]}\n   */\n  matchAll: function (str, regexp) {\n    const _matches = []\n    let _match = regexp.exec(str)\n    while (_match) {\n      _matches.push(_match)\n      _match = regexp.exec(str)\n    }\n    return _matches\n  }\n}\n\nmodule.exports = string\n","const time = require('./time')\nconst array = require('./array')\n\n/**\n * @namespace tools.task\n */\n\n/**\n * simple async parallel task manager\n * @constructor\n * @param {object} options\n * @param {function} options.done callback when all tasks are completed\n */\nconst Tasks = function (options = {}) {\n  const __tasks = []\n\n  return {\n    /**\n     * add task\n     * @param {string} id\n     */\n    todo: function (id) {\n      if (options.chrono) {\n        time.chrono.set(id)\n      }\n      __tasks.push(id)\n    },\n    /**\n     * declare task it's done\n     * @param {string} id\n     */\n    done: function (id) {\n      array.remove(__tasks, id)\n      if (__tasks.length < 1) {\n        if (options.done) {\n          options.done()\n        }\n      }\n      if (options.chrono) {\n        const _time = time.chrono.get(id)\n        time.chrono.clear(id)\n        return {chrono: _time}\n      }\n    }\n  }\n}\n\nmodule.exports = Tasks\n","const object = require('./object')\n\n/**\n * @namespace tools.time\n */\n\nconst time = {\n  /**\n   * can use across modules using same tag\n   */\n  chrono: {\n    /**\n     * @param {?string} [tag=chrono]\n     */\n    set: function (tag = 'chrono') {\n      _chronos[tag] = Date.now()\n    },\n    /**\n     * @param {?string} [tag=chrono]\n     */\n    reset: function (tag = 'chrono') {\n      _chronos[tag] = Date.now()\n    },\n    /**\n     * @param {?string} [tag=chrono]\n     */\n    clear: function (tag = 'chrono') {\n      delete _chronos[tag]\n    },\n    /**\n     * @param {?string} [tag=chrono]\n     * @return {number} ms\n     */\n    get: function (tag = 'chrono') {\n      const _now = Date.now()\n      return _chronos[tag] ? _now - _chronos[tag] : 0\n    }\n  },\n\n  /**\n   * clear counters\n   * if you care about memory leaks\n   */\n  gc: function () {\n    object.empty(_chronos)\n  }\n}\n\nconst _chronos = {}\n\nmodule.exports = time\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}